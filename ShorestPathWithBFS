     public static int BFS(int start, List<int> d, List<bool> local, List<bool> general)
        {
            Queue<int> v = new Queue<int>();
            d[start] = 0;
            local[start] = true;
            if (parents[start] == null)
            {
                d[start] = 0;
                return start;
            }
            else
            {
                v.Enqueue(start);
                while (v.Count > 0)
                {
                    int a = v.Dequeue();
                    if (general != null)
                    {
                        if (general[a] == true)
                        {
                            return a;
                        }
                    }
                    if (parents[a] == null) { }
                    else
                    {
                        //foreach (int x in parents[a]) {
                        //    Console.WriteLine(x);
                        //}
                        foreach (int x in parents[a])
                        {
                            if (local[x] == false)
                            {
                                v.Enqueue(x);
                                local[x] = true;
                                d[x] = d[a] + 1;
                            }
                        }
                    }
                }
                return 0;
            }
        }

    
    public static Tuple<int, int> get_PD(List<int> id1, List<int> id2, List<int> d1, List<int> d2, List<bool> local1, List<bool> local2)
        {
            int min = int.MaxValue;
            int par = 0;
            foreach (int x in id1)
            {
                local1 = new List<bool>();
                local1.AddRange(global);
                distance1 = new List<int>();
                distance1.AddRange(disGlobal);
                foreach (int y in id2)
                {
                   
                    local2 = new List<bool>();
                    local2.AddRange(global);
                    distance2 = new List<int>();
                    distance2.AddRange(disGlobal);
                    BFS(x, distance1, local1, null);
                    int commonParent = BFS(y, distance2, local2, local1);
                    if (distance1[commonParent] + distance2[commonParent] < min)
                    {
                        min = distance1[commonParent] + distance2[commonParent];
                        par = commonParent;
                    }

                }
            }
            distance1 = new List<int>();
            distance2 = new List<int>();
            local1 = new List<bool>();
            local2 = new List<bool>();
            return Tuple.Create(min, par);
        }
